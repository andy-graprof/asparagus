
 ##############################################################################
 #                                asparagus                                   #
 #                                                                            #
 #    Copyright (C) 2014  Andreas Grapentin                                   #
 #                                                                            #
 #    This program is free software: you can redistribute it and/or modify    #
 #    it under the terms of the GNU General Public License as published by    #
 #    the Free Software Foundation, either version 3 of the License, or       #
 #    (at your option) any later version.                                     #
 #                                                                            #
 #    This program is distributed in the hope that it will be useful,         #
 #    but WITHOUT ANY WARRANTY; without even the implied warranty of          #
 #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           #
 #    GNU General Public License for more details.                            #
 #                                                                            #
 #    You should have received a copy of the GNU General Public License       #
 #    along with this program.  If not, see <http://www.gnu.org/licenses/>.   #
 ############################################################################## 

 # This is the asparagus testing framework backend TCL script.
 ############################################################################## 

# include utility modules
source [file dirname [info script]]/lib/feedback.tcl
source [file dirname [info script]]/lib/string.tcl

# this is the entry point to asparagus - each test should start with either
#   `given' or `Given'
proc Given { args } { given {*}"$args" }
proc given { args } {
  if { [string_starts_with "$args" "an executable "] } {
    given_an_executable {*}[string_pop "$args" "an executable "]
  } else {
    fail_step "syntax error near `$args'"
    return
  }
}

proc given_an_executable { exe args } {

  pass_step "Given an executable `$exe'"
  dispatch_statement "$exe" 0 {*}"$args"

}

proc dispatch_statement { exe pid args } {
  
  if { [string length "$args"] == 0 } {
    return
  } elseif { [string equal -length [string length "when I run with parameters "] "$args" "when I run with parameters "] } {
    when_I_run_with_parameters "$exe" $pid {*}[string range "$args" [string length "when I run with parameters "] [string length "$args"]]
  } elseif { [string equal -length [string length "when I run "] "$args" "when I run "] } {
    when_I_run "$exe" $pid {*}[string range "$args" [string length "when I run "] [string length "$args"]]
  } elseif { [string equal -length [string length "and I send "] "$args" "and I send "] } {
    and_I_send "$exe" $pid {*}[string range "$args" [string length "and I send "] [string length "$args"]]
  } elseif { [string equal -length [string length "then I should see "] "$args" "then I should see "] } {
    then_I_should_see "$exe" $pid {*}[string range "$args" [string length "then I should see "] [string length "$args"]]
  } elseif { [string equal -length [string length "then I should not see "] "$args" "then I should not see "] } {
    then_I_should_not_see "$exe" $pid {*}[string range "$args" [string length "then I should not see "] [string length "$args"]]
  } else {
    fail_fatal "syntax error near `$args'"
  }

}

proc when_I_run_with_parameters { exe pid parameters args } {

  spawn $exe $parameters

  pass_step "  When I run with parameters `$parameters'"

  dispatch_statement "$exe" $spawn_id {*}"$args"

}

proc when_I_run { exe pid args } {

  spawn $exe

  pass_step "  When I run"

  dispatch_statement "$exe" $spawn_id {*}"$args"

}

proc and_I_send { exe pid str args } {

  set spawn_id $pid
  send "$str"

  pass_step "  And I send `[ string trim $str ]'"

  dispatch_statement "$exe" $pid {*}"$args"

}

proc then_I_should_see { exe pid str args } {

  set spawn_id $pid
  expect {

    "$str" {
      pass_step "  Then I should see `$str'"
    }

    default {
      fail_step "  Then I should see `$str'"
      return
    }

  }

  
  dispatch_statement "$exe" $pid {*}"$args"

}

proc then_I_should_not_see { exe pid str args } {

  set spawn_id $pid
  expect {

    "$str" {
      fail_step "  Then I should not see `$str'"
      return
    }

    default {
      pass_step "  Then I should not see `$str'"
    }
  
  }

  dispatch_statement "$exe" $pid {*}"$args"

}
